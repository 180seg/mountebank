<p>The <code>inject</code> predicate allows you to inject JavaScript to determine if
the predicate should match or not.  The JavaScript should be a function that accepts
the request parameter (and optionally a logger)  and returns truthy or falsy.
mountebank doesn't really know what that means, so he always returns <code>true</code>
or <code>false</code> when he uses <code>inject</code>.</p>

<p>Unlike all the other predicates, <code>inject</code> can work against the entire
request object (see the example below).  There are three important considerations for
injection.  First, it will only work if you've run <code>mb</code> with the
<code>--allowInjection</code> flag.  Second, when you create an imposter, mountebank
dry runs all predicates looking for validation errors.  This means that your JavaScript
will run once before the imposter is even created.  Lastly, predicate injection must be
strictly synchronous.</p>

<p>The execution will have access to a node.js environment.  The following example uses
node's <code>Buffer</code> object to decode base64 to a byte array.  The logger has four
methods corresponding to the log levels: <code>debug</code>, <code>info</code>,
<code>warn</code>, and <code>error</code>.  During the dry run, only the <code>error</code>
level will write to the log.  Notice in the example how the predicate can bind to the
<code>data</code> request element, like all the other examples, but can also bind to the
full <code>request</code> object (the second stub does this).</p>

<pre><code data-test-id='tcp inject example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 4555,
  "protocol": "tcp",
  "mode": "binary",
  "stubs": [<strong class='highlight1'>
    {
      "responses": [{ "is": { "data": "Zmlyc3QgcmVzcG9uc2U=" } }],
      "predicates": {
        "data": {
          "inject": "function (data, logger) { logger.info('Inside injection'); return new Buffer(data, 'base64')[2] &gt; 100; }"
        }
      }
    }</strong>,<strong class='highlight2'>
    {
      "responses": [{ "is": { "data": "c2Vjb25kIHJlc3BvbnNl" } }],
      "predicates": {
        "request": {
          "inject": "function (request) { return request.requestFrom.indexOf('127.0.0.1') === 0 && new Buffer(request.data, 'base64')[2] &lt;= 100; }"
        }
      }
    }</strong>
  ]
}
</code></pre>

<p>The first stub matches if the third byte is greater than 100.  The request we're
sending is an encoding <code>[99, 100, 101]:</code></p>

<pre><code data-test-id='tcp inject example'
           data-test-step='2'
           data-test-type='exec'>
echo '<strong class='highlight1'>Y2Rl</strong>' | base64 --decode | nc localhost 4555
</code></pre>

<pre><code data-test-id='tcp inject example'
           data-test-verify-step='2'>
<strong class='highlight1'>first response</strong>
</code></pre>

<p>The logs will also show the injected log output.  The second predicate has to
match a request originating from localhost with the third byte less than or equal
to 100.  We're sending <code>[98, 99, 100]</code>:</p>

<pre><code data-test-id='tcp inject example'
           data-test-step='3'
           data-test-type='exec'>
echo '<strong class='highlight1'>YmNk</strong>' | base64 --decode | nc localhost 4555
</code></pre>

<p>...giving the response:</p>

<pre><code data-test-id='tcp inject example'
           data-test-verify-step='3'>
second response
</code></pre>

<code class='hidden' data-test-id='tcp inject example'
                     data-test-step='4  '
                     data-test-type='http'>
DELETE /imposters/4555 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>
