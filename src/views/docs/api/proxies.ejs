<% include ../../_header %>

<h1>Proxies</h1>

<p>Proxies are one of the most powerful features of mountebank, rivaled only by the
mighty <a href='/docs/api/injection'>injection.</a>  Each proxied response is recorded,
either as an entirely new stub in the imposter's <code>stubs</code> array, or as a
new response in the stub's <code>responses</code> array.  Proxies allow you to define
the fields which should be included in newly created <code>predicates</code>.  The
<code>proxy</code> will ensure that the proxied request data for those fields are
filled in.</p>

<p><code>proxy</code> resolvers take the following parameters:</p>

<table>
  <tr>
    <th>Parameter</th>
    <th style='min-width: 4em;'>Default</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>to</code></td>
    <td>required</td>
    <td>For http and http imposters, a string.  For tcp imposters, an object
    containing a <code>host</code> string and <code>port</code> integer.</td>
    <td>Defines the origin server that the stub should proxy to.</td>
  </tr>
  <tr>
    <td><code>mode</code></td>
    <td><code>proxyOnce</code></td>
    <td>string, one of <code>proxyOnce</code> or <code>proxyAlways</code>.</td>
    <td>Defines the replay behavior of the proxy.  <code>proxyOnce</code>
    always records the proxied call in the <code>stubs</code> array in
    front of itself, so the same call is never proxied twice.  <code>proxyAlways</code>
    saves the proxied call <em>after</em> itself in the <code>stubs</code>
    array.  This allows you to capture different responses for the same call.
    You can later replay <code>proxyAlways</code> stubs by issuing a <code>GET</code>
    or <code>DELETE</code> to the imposter, deleting the <code>proxy</code> stub,
    and re-<code>POST</code>ing the imposter.</td>
  </tr>
  <tr>
    <td><code>predicateGenerators</code></td>
    <td><code>[]</code></td>
    <td>array</td>
    <td>An array of objects that defines how the predicates for new stubs are created.</td>
  </tr>
</table>

<h2>Understanding proxy behavior</h2>

<p>The <code>mode</code> and <code>predicateGenerators</code> parameters define the behavior of
the <code>proxy</code>.  The default <code>proxyOnce</code> mode is simpler; it always
creates a new stub.  Imagine the following <code>stubs</code> array, set by us when
we create the imposter:</p>

<pre><code>
"stubs": [
  {
    "responses": [
      {
        "proxy": {
          "to": "http://origin-server.com",
          "mode": "proxyOnce",
          "predicateGenerators": [
            {
              "matches": {
                "method": true,
                "path": true,
                "query": true
              }
            }
          ]
        }
      }
    ]
  }
]
</code></pre>

<p>When we issue a <code>GET</code> to <code>/test?q=mountebank</code>, the stub
will proxy to http://origin-server.com/test?q=mountebank, and save
off the response in a new stub in front of the <code>proxy</code> response:</p>

<pre><code>
"stubs": [
  {
    "predicates": [{
      "deepEquals': {
        "method": "GET",
        "path": "/test",
        "query": { "q": "mountebank" }
      }
    }],
    "responses": [
      { "is": ...saved response }
    ]
  }
  {
    "responses": [
      {
        "proxy": {
          "to": "http://origin-server.com",
          "mode": "proxyOnce",
          "predicateGenerators": [
            {
              "matches": {
                "method": true,
                "path": true,
                "query": true
              }
            }
          ]
        }
      }
    ]
  }
]
</code></pre>

<p>Because of mountebank's first-match policy on stubs, the next time the imposter
receives a <code>GET /test?q=mountebank</code> request, the saved predicates on the
newly created stub will match, and the recorded response will be replayed.  If
the imposter receives a <code>GET /test?q=mountebank&amp;sort=descending</code>, then
it will proxy again, creating a new stub, because the querystring is different.</p>

<p>A <code>proxyAlways</code> resolver saves stubs behind the <code>proxy</code>
stub.  This allows you to record a richer set of interactions with the origin server,
but requires you to save off the imposter representation and remove or reorder the
<code>proxy</code> to replay those interactions.</p>

<p>Let's say you had the following <code>stubs</code> array:</p>

<pre><code>
"stubs": [
  {
    "responses": [
      {
        "proxy": {
          "to": "http://origin-server.com",
          "mode": "proxyAlways",
          "predicateGenerators": [
            { "matches": { "path": true } }
          ]
        }
      }
    ]
  },
  {
    "predicates": [
      { "equals": { "path": "/test" } }
    ],
    "responses": [
      { "is": { "body": "first response" } }
    ]
  }
]
</code></pre>

<p>The next time we send a request to <code>/test</code>, the request will still
be proxied to http://origin-server.com/test.  Since the predicate that we would
normally create already exists after the <code>proxy</code> stub, the proxied
response instead gets added to an existing stub's <code>responses</code> array.</p>

<pre><code>
"stubs": [
  {
    "responses": [
      {
        "proxy": {
          "to": "http://origin-server.com",
          "mode": "proxyAlways",
          "predicateGenerators": [
            { "matches": { "path": true } }
          ]
        }
      }
    ]
  },
  {
    "predicates": [
      { "deepEquals": { "path": "/test" } }
    ],
    "responses": [
      { "is": { "body": "first response" } },
      { "is": { ...saved response } }
    ]
  }
]
</code></pre>

<p><code>predicateGenerators</code> accept the same predicate parameters as
<a href='/docs/api/predicates'>predicates</a>: <code>caseSensitive</code> and
<code>except</code>.</p>
<h2>Examples</h2>

<p>Our examples will proxy to the following origin server.  To help
us keep track of the imposters in the logs, we'll set the <code>name</code>
field.  We're using <a href='/docs/api/injection'>injection</a> to return the
number of times the proxy has been called to the user.</p>

<pre><code data-test-id='proxy example'
           data-test-step='1'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 7575,
  "protocol": "http",
  "name": "origin",
  "stubs": [
    {
      "responses": [{
        "inject": "function (request, state) { state.calls = state.calls || 0; return { body: 'call ' + ++state.calls }; }"
      }]
    }
  ]
}
</code></pre>

<h3>proxyOnce</h3>

<p>Let's create another imposter, this time using the <code>proxyOnce</code> mode
to give us on-the-fly record and playback functionality.</p>

<pre><code data-test-id='proxy example'
           data-test-step='2'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 6566,
  "protocol": "http",
  "name": "proxyOnce",
  "stubs": [
    {
      "responses": [
        {
          "proxy": {
            "to": "http://localhost:7575",
            "mode": "proxyOnce",
            "predicateGenerators": [
              {
                "matches": {
                  "method": true,
                  "path": true,
                  "query": true
                }
              }
            ]
          }
        }
      ]
    }
  ]
}
</code></pre>

<p>The first call will trigger a call to the origin server:</p>

<pre><code data-test-id='proxy example'
           data-test-step='3'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6566
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='3'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 1
</code></pre>

<p>The second call also triggers a call to the origin server, since
it's on a different <code>path</code>:</p>

<pre><code data-test-id='proxy example'
           data-test-step='4'
           data-test-type='http'>
GET /dir?first=1 HTTP/1.1
Host: localhost:6566
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='4'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 2
</code></pre>

<p>The third call triggers a call to the origin server because it
has a different querystring:</p>

<pre><code data-test-id='proxy example'
           data-test-step='5'
           data-test-type='http'>
GET /test?first=1&amp;second=2 HTTP/1.1
Host: localhost:6566
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='5'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 3
</code></pre>

<p>If we send one of the requests already sent, the response
will be replayed:</p>

<pre><code data-test-id='proxy example'
           data-test-step='6'
           data-test-type='http'>
GET /test?first=1&amp;second=2 HTTP/1.1
Host: localhost:6566
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='6'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 3
</code></pre>

<code class='hidden' data-test-id='proxy example'
                     data-test-step='7'
                     data-test-type='http'>
DELETE /imposters/6566 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code>

<code class='hidden' data-test-id='proxy example'
                     data-test-verify-step='7'
                     data-test-ignore-lines='["[Dd]ate", "timestamp", "requestFrom", "Content-Length"]'>
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 6857
Date: Mon, 27 Jan 2014 04:35:55 GMT
Connection: keep-alive

{
  "protocol": "http",
  "port": 6566,
  "name": "proxyOnce",
  "requests": [
    {
      "requestFrom": "127.0.0.1:61728",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6566",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61730",
      "method": "GET",
      "path": "/dir",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6566",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61732",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1",
        "second": "2"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6566",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61734",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1",
        "second": "2"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6566",
        "connection": "keep-alive"
      },
      "body": ""
    }
  ],
  "stubs": [
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 1"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/dir"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 2"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1",
              "second": "2"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 3"
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-27T04:35:55.298Z",
          "request": {
            "requestFrom": "127.0.0.1:61734",
            "method": "GET",
            "path": "/test",
            "query": {
              "first": "1",
              "second": "2"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6566",
              "connection": "keep-alive"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 3"
          }
        }
      ]
    },
    {
      "responses": [
        {
          "proxy": {
            "to": "http://localhost:7575",
            "mode": "proxyOnce",
            "predicateGenerators": [
              {
                "matches": {
                  "method": true,
                  "path": true,
                  "query": true
                }
              }
            ]
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-27T04:35:55.273Z",
          "request": {
            "requestFrom": "127.0.0.1:61728",
            "method": "GET",
            "path": "/test",
            "query": {
              "first": "1"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6566",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 1"
          }
        },
        {
          "timestamp": "2014-01-27T04:35:55.282Z",
          "request": {
            "requestFrom": "127.0.0.1:61730",
            "method": "GET",
            "path": "/dir",
            "query": {
              "first": "1"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6566",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 2"
          }
        },
        {
          "timestamp": "2014-01-27T04:35:55.290Z",
          "request": {
            "requestFrom": "127.0.0.1:61732",
            "method": "GET",
            "path": "/test",
            "query": {
              "first": "1",
              "second": "2"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6566",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:35:55 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 3"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/6566"
    }
  }
}
</code>

<h3>proxyAlways</h3>

<p>First let's create the proxy:</p>

<pre><code data-test-id='proxy example'
           data-test-step='8'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "port": 6568,
  "protocol": "http",
  "name": "proxyAlways",
  "stubs": [
    {
      "responses": [
        {
          "proxy": {
            "to": "http://localhost:7575",
            "mode": "proxyAlways",
            "predicateGenerators": [
              {
                "matches": {
                  "method": true,
                  "path": true,
                  "query": true
                }
              }
            ]
          }
        }
      ]
    }
  ]
}
</code></pre>

<p>Let's record a response:</p>

<pre><code data-test-id='proxy example'
           data-test-step='9'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='9'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 4
</code></pre>

<p>We'll make the same request.  Unlike a <code>proxyOnce</code> resolver,
this request will still be proxied:</p>

<pre><code data-test-id='proxy example'
           data-test-step='10'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='10'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 5
</code></pre>

<p>Now let's make on request to a different <code>path</code>:</p>

<pre><code data-test-id='proxy example'
           data-test-step='11'
           data-test-type='http'>
GET /dir?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='11'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 6
</code></pre>

<p>Now we'll stop the origin server.</p>

<pre><code data-test-id='proxy example'
           data-test-step='12'
           data-test-type='http'>
DELETE /imposters/7575 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code></pre>

<p>And now we'll stop the proxy imposter.</p>

<pre><code data-test-id='proxy example'
           data-test-step='13'
           data-test-type='http'>
DELETE /imposters/6568 HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
</code></pre>

<code class='hidden' data-test-id='proxy example'
                     data-test-verify-step='13'
                     data-test-ignore-lines='["[Dd]ate", "timestamp", "requestFrom", "Content-Length"]'>
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 5297
Date: Mon, 27 Jan 2014 04:38:44 GMT
Connection: keep-alive

{
  "protocol": "http",
  "port": 6568,
  "name": "proxyAlways",
  "requests": [
    {
      "requestFrom": "127.0.0.1:61762",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61764",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61766",
      "method": "GET",
      "path": "/dir",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    }
  ],
  "stubs": [
    {
      "responses": [
        {
          "proxy": {
            "to": "http://localhost:7575",
            "mode": "proxyAlways",
            "predicateGenerators": [
              {
                "matches": {
                  "method": true,
                  "path": true,
                  "query": true
                }
              }
            ]
          }
        }
      ],
      "matches": [
        {
          "timestamp": "2014-01-27T04:38:44.636Z",
          "request": {
            "requestFrom": "127.0.0.1:61762",
            "method": "GET",
            "path": "/test",
            "query": {
              "first": "1"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6568",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 4"
          }
        },
        {
          "timestamp": "2014-01-27T04:38:44.642Z",
          "request": {
            "requestFrom": "127.0.0.1:61764",
            "method": "GET",
            "path": "/test",
            "query": {
              "first": "1"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6568",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 5"
          }
        },
        {
          "timestamp": "2014-01-27T04:38:44.647Z",
          "request": {
            "requestFrom": "127.0.0.1:61766",
            "method": "GET",
            "path": "/dir",
            "query": {
              "first": "1"
            },
            "headers": {
              "accept": "application/json",
              "host": "localhost:6568",
              "connection": "close"
            },
            "body": ""
          },
          "response": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 6"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 4"
          }
        },
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 5"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/dir"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 6"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/6568"
    }
  }
}
</code>

<p>Now for the <em>coup de gr&acirc;ce</em>.  We saved off the
response we received from the <code>DELETE</code> call, removed
the <code>proxy</code> stub, and are re-<code>POST</code>ing it.  Just
to show it works, we're leaving all the additional metadata in, like
<code>requests</code> and <code>matches</code>, but to keep the JSON
clean you'll probably want to delete them as well:</p>

<pre><code data-test-id='proxy example'
           data-test-step='14'
           data-test-type='http'>
POST /imposters HTTP/1.1
Host: localhost:<%= port %>
Accept: application/json
Content-Type: application/json

{
  "protocol": "http",
  "port": 6568,
  "name": "proxyAlways",
  "requests": [
    {
      "requestFrom": "127.0.0.1:61762",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61764",
      "method": "GET",
      "path": "/test",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    },
    {
      "requestFrom": "127.0.0.1:61766",
      "method": "GET",
      "path": "/dir",
      "query": {
        "first": "1"
      },
      "headers": {
        "accept": "application/json",
        "host": "localhost:6568",
        "connection": "close"
      },
      "body": ""
    }
  ],
  "stubs": [
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/test"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 4"
          }
        },
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 5"
          }
        }
      ]
    },
    {
      "predicates": [
        {
          "deepEquals": {
            "method": "GET"
          }
        },
        {
          "deepEquals": {
            "path": "/dir"
          }
        },
        {
          "deepEquals": {
            "query": {
              "first": "1"
            }
          }
        }
      ],
      "responses": [
        {
          "is": {
            "statusCode": 200,
            "headers": {
              "connection": "close",
              "date": "Mon, 27 Jan 2014 04:38:44 GMT",
              "transfer-encoding": "chunked"
            },
            "body": "call 6"
          }
        }
      ]
    }
  ],
  "_links": {
    "self": {
      "href": "http://localhost:<%= port %>/imposters/6568"
    }
  }
}
</code></pre>

<p>Notice the two responses on the first stub.  Let's trigger the first one:</p>

<pre><code data-test-id='proxy example'
           data-test-step='15'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='15'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 4
</code></pre>

<p>Since the <code>responses</code> array represents a circular buffer, the second call
triggers the next response in order:</p>

<pre><code data-test-id='proxy example'
           data-test-step='16'
           data-test-type='http'>
GET /test?first=1 HTTP/1.1
Host: localhost:6568
</code></pre>

<pre><code data-test-id='proxy example'
           data-test-verify-step='16'
           data-test-ignore-lines='["^Date"]'>
HTTP/1.1 200 OK
Connection: close
Date: Thu, 09 Jan 2014 02:30:31 GMT
Transfer-Encoding: chunked

call 5
</code></pre>

<code class='hidden' data-test-id='proxy example'
                     data-test-step='17'
                     data-test-type='http'>
DELETE /imposters/6568
Host: localhost:<%= port %>
</code>

<% include ../../_footer %>
