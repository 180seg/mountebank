<% include ../../_header %>

<h1>Predicates</h1>

<p>In the absence of a predicate, a stub always matches, and there's never a reason to
add more than one stub to an imposter.  Predicates allow imposter to have much richer
behavior by defining whether or not a stub matches a request.  When multiple stubs are
created on an imposter, the first stub that matches is selected.</p>

<p>Each predicate object contains one or more of the request fields as keys.  All keys are
AND'd together.  The following predicate operators are allowed:</p>

<table>
  <tr>
    <th>Operator</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>is</code></td>
    <td>The request field matches the predicate</td>
  </tr>
  <tr>
    <td><code>contains</code></td>
    <td>The request field contains the predicate</td>
  </tr>
  <tr>
    <td><code>startsWith</code></td>
    <td>The request field starts with the predicate</td>
  </tr>
  <tr>
    <td><code>endsWith</code></td>
    <td>The request field ends with the predicate</td>
  </tr>
  <tr>
    <td><code>matches</code></td>
    <td>The request field matches the JavaScript regular expression defined
    with the predicate.</td>
  </tr>
  <tr>
    <td><code>exists</code></td>
    <td>If <code>true</code>, the request field must exist.  If <code>false</code>,
    the request field must not exist.</td>
  </tr>
  <tr>
    <td><code>not</code></td>
    <td>Inverts a predicate</td>
  </tr>
  <tr>
    <td><code>or</code></td>
    <td>Logically or's two predicates together</td>
  </tr>
  <tr>
    <td><code>and</code></td>
    <td>Logically and's two predicates together</td>
  </tr>
  <tr>
    <td><code>inject</code></td>
    <td>Injects JavaScript to decide whether the request matches or not.
    See the <a href='/docs/api/injection'>injection</a> page for an example.</td>
  </tr>
</table>

<p>All the string operations are case-insensitive (this keys for JSON objects, like
HTTP header and query parameters).  All predicates are scoped to a request field;
see the protocol pages linked to from the sidebar to see the request fields.
<code>inject</code> also adds a <code>request</code> field, which represents the
entire request.  See the <a href='/docs/api/injection'>injection</a> page for details.</p>

<p>The predicates work intuitively for base64-encoded binary data as well by internally
converting the base64-encoded string to a JSON string representing the byte array.  For example,
sending "AQIDBA==" will get translated to "[1,2,3,4]", and predicates expecting "AgM=" will
get translated to "[2,3]".  Even though "AQIDBA==" does not contain "AgM=", a <code>contains</code>
predicate will match, because "[1,2,3,4]" does contain "[2,3]".  This works well for everything
but <code>matches</code>, because any regular expression operators get encoded as binary.
mountebank recommends that you stay away from <code>matches</code> if you're dealing in binary.</p>

<p>See the protocol pages linked to from the sidebar for examples.</p>

<% include ../../_footer %>
