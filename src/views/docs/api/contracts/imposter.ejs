<%
title = 'Imposter contract'
description = "The specification of the imposter resource"
%>

<% include ../../../_header %>

<h1>Imposter Contract</h1>

<p>To get more details on any field, simply hover your mouse over that field.  Purple fields
are only meaningful in the response; they will be ignored in any requests.</p>

<pre class='contract' id='specification'><code>{
<span id='port'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;port&quot;: 4545,</span>
<span id='protocol'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;protocol&quot;: &quot;https&quot;,</span>
<span id='name'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;name&quot;: &quot;imposter contract service&quot;,</span>
<span id='key'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;key&quot;: &quot;-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCrvse04YkxtVGagyvGJCsvv7LTfLK5uR/ZIJKDYCnuF+BqBzM4\nlko8O39vx+Lz9FfF11Xl+CN1aY37YurLYOle3dC/qslSbQDe2TJN7lcVHVssePvc\nO5IExpvNFV5LYtmyCMKJHxpnIprv/trUso5obqzzXhFVPV9SQbFH/snInwIDAQAB\nAoGARywlqLD6YO4qJiULw+4DM6N2oSwBCPRN3XYhIW59kdy1NFtNf7rQgsuJUTJ9\nu+lbYnKNd2LwltyqaS4h7Sx5KRhpFNmMpyVsBf5J2q3fbfmrsXt+emY7XhVTc1NV\nizUWYyxCoTTeMWvN/6NYpPV0lSxq7jMTFVZrWQUMqJclxpECQQDTlGwALtAX1Y8u\nGKsEHPkoq9bhHA5N9WAboQ4LQCZVC8eBf/XH//2iosYTXRNgII2JLmHmmxJHo5iN\nJPFMbnoHAkEAz81osJf+yHm7PBBJP4zEWZCV25c+iJiPDpj5UoUXEbq47qVfy1mV\nDqy2zoDynAWitU7PeHyZ8ozfyribPoR2qQJAVmvMhXKZmvKnLivzRpXTC9LMzVwZ\nV6x/Wim5w8yrG5fZIMM0kEG2xwR3pZch/+SsCzl/0aLLn6lp+VT6nr6NZwJBAMxs\nHrvymoLvNeDtiJFK0nHliXafP7YyljDfDg4+vSYE0R57c1RhSQBJqgBV29TeumSw\nJes6cFuqeBE+MAJ9XxkCQDdUdhnA8HHQRNetqK7lygUep7EcHHCB6u/0FypoLw7o\nEUVo5KSEFq93UeMr3B7DDPIz3LOrFXlm7clCh1HFZhQ=\n-----END RSA PRIVATE KEY-----&quot;,</span>
<span id='cert'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;cert&quot;: &quot;-----BEGIN CERTIFICATE-----\nMIIB6TCCAVICCQCZgxbBD0CG4zANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJV\nUzETMBEGA1UECBMKU29tZS1TdGF0ZTEVMBMGA1UEChMMVGhvdWdodFdvcmtzMB4X\nDTEzMTIyOTE2NDAzN1oXDTE0MDEyODE2NDAzN1owOTELMAkGA1UEBhMCVVMxEzAR\nBgNVBAgTClNvbWUtU3RhdGUxFTATBgNVBAoTDFRob3VnaHRXb3JrczCBnzANBgkq\nhkiG9w0BAQEFAAOBjQAwgYkCgYEAq77HtOGJMbVRmoMrxiQrL7+y03yyubkf2SCS\ng2Ap7hfgagczOJZKPDt/b8fi8/RXxddV5fgjdWmN+2Lqy2DpXt3Qv6rJUm0A3tky\nTe5XFR1bLHj73DuSBMabzRVeS2LZsgjCiR8aZyKa7/7a1LKOaG6s814RVT1fUkGx\nR/7JyJ8CAwEAATANBgkqhkiG9w0BAQUFAAOBgQCPhixeKxIy+ftrfPikwjYo1uxp\ngQ18FdVN1pbI//IIx1o8kJuX8yZzO95PsCOU0GbIRCkFMhBlqHiD9H0/W/GvWzjf\n7WFW15lL61y/kH1J0wqEgoaMrUDjHZvKVr0HrN+vSxHlNQcSNFJ2KdvZ5a9dhpGf\nXOdprCdUUXzSoJWCCg==\n-----END CERTIFICATE-----&quot;,</span>
<span id='mutualAuth'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;mutualAuth&quot;: false,</span>
<span id='stubs'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;stubs&quot;: [</span>
    {
<span id='stubs-responses'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>    &quot;responses&quot;: [</span>
        {
<span id='stubs-responses-is'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;is&quot;: {
            &quot;statusCode&quot;: 201,
            &quot;headers&quot;: {
              &quot;Location&quot;: &quot;http://example.com/resource&quot;
            },
            &quot;body&quot;: &quot;The time is ${TIME}&quot;,
            &quot;_mode&quot;: &quot;text&quot;
          },</span>
<span id='stubs-_behaviors'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;_behaviors&quot;: {</span>
<span id='stubs-_behaviors-wait'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;wait&quot;: 500,</span>
<span id='stubs-_behaviors-decorate'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;decorate&quot;: &quot;function (request, response) { response.body = response.body.replace('${TIME}', 'now'); }&quot;</span>
          }
        },
        {
<span id='stubs-responses-proxy'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;proxy&quot;: {</span>
<span id='stubs-responses-proxy-to'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;to&quot;: &quot;https://www.somesite.com:3000&quot;,</span>
<span id='stubs-responses-proxy-mode'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;mode&quot;: &quot;proxyAlways&quot;,</span>
<span id='stubs-responses-proxy-key'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;key&quot;: &quot;-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQCrvse04YkxtVGagyvGJCsvv7LTfLK5uR/ZIJKDYCnuF+BqBzM4\nlko8O39vx+Lz9FfF11Xl+CN1aY37YurLYOle3dC/qslSbQDe2TJN7lcVHVssePvc\nO5IExpvNFV5LYtmyCMKJHxpnIprv/trUso5obqzzXhFVPV9SQbFH/snInwIDAQAB\nAoGARywlqLD6YO4qJiULw+4DM6N2oSwBCPRN3XYhIW59kdy1NFtNf7rQgsuJUTJ9\nu+lbYnKNd2LwltyqaS4h7Sx5KRhpFNmMpyVsBf5J2q3fbfmrsXt+emY7XhVTc1NV\nizUWYyxCoTTeMWvN/6NYpPV0lSxq7jMTFVZrWQUMqJclxpECQQDTlGwALtAX1Y8u\nGKsEHPkoq9bhHA5N9WAboQ4LQCZVC8eBf/XH//2iosYTXRNgII2JLmHmmxJHo5iN\nJPFMbnoHAkEAz81osJf+yHm7PBBJP4zEWZCV25c+iJiPDpj5UoUXEbq47qVfy1mV\nDqy2zoDynAWitU7PeHyZ8ozfyribPoR2qQJAVmvMhXKZmvKnLivzRpXTC9LMzVwZ\nV6x/Wim5w8yrG5fZIMM0kEG2xwR3pZch/+SsCzl/0aLLn6lp+VT6nr6NZwJBAMxs\nHrvymoLvNeDtiJFK0nHliXafP7YyljDfDg4+vSYE0R57c1RhSQBJqgBV29TeumSw\nJes6cFuqeBE+MAJ9XxkCQDdUdhnA8HHQRNetqK7lygUep7EcHHCB6u/0FypoLw7o\nEUVo5KSEFq93UeMr3B7DDPIz3LOrFXlm7clCh1HFZhQ=\n-----END RSA PRIVATE KEY-----&quot;,</span>
<span id='stubs-responses-proxy-cert'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;cert&quot;: &quot;-----BEGIN CERTIFICATE-----\nMIIB6TCCAVICCQCZgxbBD0CG4zANBgkqhkiG9w0BAQUFADA5MQswCQYDVQQGEwJV\nUzETMBEGA1UECBMKU29tZS1TdGF0ZTEVMBMGA1UEChMMVGhvdWdodFdvcmtzMB4X\nDTEzMTIyOTE2NDAzN1oXDTE0MDEyODE2NDAzN1owOTELMAkGA1UEBhMCVVMxEzAR\nBgNVBAgTClNvbWUtU3RhdGUxFTATBgNVBAoTDFRob3VnaHRXb3JrczCBnzANBgkq\nhkiG9w0BAQEFAAOBjQAwgYkCgYEAq77HtOGJMbVRmoMrxiQrL7+y03yyubkf2SCS\ng2Ap7hfgagczOJZKPDt/b8fi8/RXxddV5fgjdWmN+2Lqy2DpXt3Qv6rJUm0A3tky\nTe5XFR1bLHj73DuSBMabzRVeS2LZsgjCiR8aZyKa7/7a1LKOaG6s814RVT1fUkGx\nR/7JyJ8CAwEAATANBgkqhkiG9w0BAQUFAAOBgQCPhixeKxIy+ftrfPikwjYo1uxp\ngQ18FdVN1pbI//IIx1o8kJuX8yZzO95PsCOU0GbIRCkFMhBlqHiD9H0/W/GvWzjf\n7WFW15lL61y/kH1J0wqEgoaMrUDjHZvKVr0HrN+vSxHlNQcSNFJ2KdvZ5a9dhpGf\nXOdprCdUUXzSoJWCCg==\n-----END CERTIFICATE-----&quot;,</span>
<span id='stubs-responses-proxy-predicateGenerators'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;predicateGenerators&quot;: [
              {
                &quot;matches&quot;: {
                  &quot;method&quot;: true,
                  &quot;path&quot;: true
                }</span>
              }
            ]
          }
        },
        {
<span id='stubs-responses-inject'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;inject&quot;: &quot;function (request, state, logger callback) { callback({ body: 'It worked!' ); }&quot;</span>
        }
      ],
<span id='stubs-predicates'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>    &quot;predicates&quot;: [</span>
        {
<span id='stubs-predicates-equals'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;equals&quot;: {
            &quot;body&quot;: &quot;value&quot;,</span>
<span id='stubs-predicates-equals-caseSensitive'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;caseSensitive&quot;: true,</span>
<span id='stubs-predicates-equals-except'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;except&quot;: &quot;^The &quot;,</span>
<span id='stubs-predicates-equals-xpath'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>          &quot;xpath&quot;: {
              &quot;selector&quot;: &quot;//book/@title&quot;,
              &quot;ns&quot;: {
                &quot;isbn&quot;: &quot;http://schemas.isbn.org/ns/1999/basic.dtd&quot;
              }</span>
            }
          }
        },
        {
<span id='stubs-predicates-inject'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>        &quot;inject&quot;: &quot;function (request, logger) { return request.body.length &lt; 100; }&quot;</span>
        }
      ],
<span id='stubs-matches' class='response'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>    &quot;matches&quot;: [
        {
          &quot;timestamp&quot;: &quot;2014-01-09T02:30:31.043Z&quot;,
          &quot;request&quot;: {
            &quot;requestFrom&quot;: &quot;::ffff:127.0.0.1:60523&quot;,
            &quot;method&quot;: &quot;POST&quot;,
            &quot;path&quot;: &quot;/imposters&quot;,
            &quot;query&quot;: {},
            &quot;headers&quot;: {
              &quot;accept&quot;: &quot;text/plain&quot;,
              &quot;host&quot;: &quot;localhost:4545&quot;,
              &quot;content-type&quot;: &quot;application/xml&quot;,
              &quot;connection&quot;: &quot;keep-alive&quot;,
              &quot;transfer-encoding&quot;: &quot;chunked&quot;
            },
            &quot;body&quot;: &quot;&lt;books&gt;&lt;book title='The value' /&gt;&lt;/books&gt;&quot;
          },
          &quot;response&quot;: {
            &quot;statusCode&quot;: 201,
            &quot;headers&quot;: {
              &quot;Location&quot;: &quot;http://example.com/resource&quot;
            },
            &quot;body&quot;: &quot;The time is now&quot;,
            &quot;_mode&quot;: &quot;text&quot;
          }
        }
      ]
    }
  ],</span>
<span id='endOfRequestResolver'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;endOfRequestResolver&quot;: {
    &quot;inject&quot;: &quot;function (request, logger) { return request.length &gt;= 100; }&quot;</span>
  },
<span id='requests' class='response'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;requests&quot;: [
    {
      &quot;timestamp&quot;: &quot;2014-01-09T02:30:31.043Z&quot;,
      &quot;requestFrom&quot;: &quot;::ffff:127.0.0.1:60523&quot;,
      &quot;method&quot;: &quot;POST&quot;,
      &quot;path&quot;: &quot;/imposters&quot;,
      &quot;query&quot;: {},
      &quot;headers&quot;: {
        &quot;accept&quot;: &quot;text/plain&quot;,
        &quot;host&quot;: &quot;localhost:4545&quot;,
        &quot;content-type&quot;: &quot;text/plain&quot;,
        &quot;connection&quot;: &quot;keep-alive&quot;,
        &quot;transfer-encoding&quot;: &quot;chunked&quot;
      },
      &quot;body&quot;: &quot;Just checking&quot;
    }
  ],</span>
<span id='_links' class='response'> <a title='Click to pin documentation on the right' class='thumbtack-icon'></a>&quot;_links&quot;: {
    &quot;self&quot;: {
      &quot;href&quot;: &quot;http://localhost:2525/imposters/4545&quot;</span>
    }
  }
}
</code></pre>

<div class='contract' id='specification-description'>
  <div id='port-description'>
    <p>The port to run the imposter on.<p>
    <p>Optional.  Defaults to a randomly assigned port that will be returned in the response</p>
    <p>On Linux and Mac, requires <code>sudo</code> to set to a privileged port (1-1023)</p>
  </div>

  <div id='protocol-description'>
    <p>Defines the protocol that the imposter will respond to.  Valid values are:</p>
    <ul class='bullet-list indent'>
      <li>http</li>
      <li>https</li>
      <li>tcp</li>
      <li>smtp</li>
    </ul>
    <p>Most of the API represented in this contract is protocol-agnostic, except for the request
    and response fields.  When a field is specific to a particular protocol, it will be documented
    as such when you hover over it.</p>
  </div>

  <div id='name-description'>
    <p>Optional.  Allows you to provide a descriptive name that will show up in the <a href='/logs'>logs</a>
    and the <a href='/imposters'>imposters UI</a>.</p>
  </div>

  <div id='key-description'>
    <p>Optional.  Allows you to pass in an SSL private key for creating an https server (this field only applies
    to https).  Must be a PEM-formatted string.  Defaults to a built-in private key.</p>

    <p>More information: <a href='/docs/protocols/https'>https</a></p>
  </div>

  <div id='cert-description'>
    <p>Optional.  Allows you to pass in an SSL certificate for creating an https server (this field only applies
      to https).  Must be a PEM-formatted string.  Defaults to a built-in self-signed certificate.</p>

    <p>More information: <a href='/docs/protocols/https'>https</a></p>
  </div>

  <div id='mutualAuth-description'>
    <p>Optional.  If set to <code>true</code>, the server will request a client certificate. Since the goal
      is simply to virtualize a server requiring mutual auth, invalid certificates will not be rejected.</p>

    <p>More information: <a href='/docs/protocols/https'>https</a></p>
  </div>

  <div id='stubs-description'>
    <p>A set of behaviors used to generate a response for an imposter. An imposter can have 0 or more stubs,
      each of which are associated with different predicates and support different responses.</p>

    <p>You would use multiple stubs for an imposter if the types of response you return depends on something
    in the request, matched with a predicate.</p>
  </div>

  <div id='stubs-responses-description'>
    <p>An array of responses to return for this stub.  The responses array defines a circular buffer - every
      time the stub is used for the request, the first response is pulled from the front of the
      <code>responses</code> array, evaluated, and pushed to the back of the array.  This elegantly does what
      you want.  In the common case, when you always want to return the same response, you just add one response
      to the array.  More complex scenarios will require that the same endpoint returns a sequence of
      different responses for the same predicates.  Simply add them all to the array in order.
      When the sequence finishes, it will start over.  More complexity can be added by simply
      adding more responses to the array without complicating the contract.</p>

    <p>Each response is defined by one and only one <i>stub resolver</i>.  This defines the type of response
    generated.  The following stub resolvers are supported, and described in more detail in the contract
    example to the left as well as the links provided below.</p>

    <ul class='bullet-list indent'>
      <li><a href='/docs/api/stubs'>is</a>: A canned response</li>
      <li><a href='/docs/api/proxies'>proxy</a>: A record/replay response</li>
      <li><a href='/docs/api/injection'>inject</a>: A scripted response</li>
    </ul>
  </div>

  <div id='stubs-responses-is-description'>
    <p>The <code>is</code> resolver represents a canned response that you define.  The response fields will
      be those defined with each protocol according to the links below (the http response fields
      are shown in this example).  smtp stubbing is not supported.</p>

    <p>You do not need to fill in every response field; mountebank will merge the specified response fields
      with the response defaults (see the protocol pages below for the defaults).</p>

    <ul class='bullet-list indent'>
      <li><a href='/docs/protocols/http'>http</a></li>
      <li><a href='/docs/protocols/https'>https</a></li>
      <li><a href='/docs/protocols/tcp'>tcp</a></li>
    </ul>

    <p>More information: <a href='/docs/api/stubs'>stubs</a></p>
  </div>

  <div id='stubs-_behaviors-description'>
    <p>Behaviors alter the generated response in some way.  The following behaviors are supported:</p>

    <ul class='bullet-list indent'>
      <li>wait</li>
      <li>decorate</li>
    </ul>

    <p>More information: <a href='/docs/api/behaviors'>behaviours</a></p>
  </div>

  <div id='stubs-_behaviors-wait-description'>
    <p>Adds latency to a response by waiting a specified number of milliseconds before sending the response.</p>

    <p>More information: <a href='/docs/api/behaviors'>behaviors</a></p>
  </div>

  <div id='stubs-_behaviors-decorate-description'>
    <p>Post-processes the response before sending it.  Since post-processing requires JavaScript
      injection, the <code><a href='/docs/commandLine'>--allowInjection</a></code> flag must be passed.
      Post-processing opens up a world of opportunities - you can use a <code>decorate</code> behavior
      to add data to a proxied response or substitute data from the request into the response, for
      example.  The value passed into the <code>decorate</code> behavior is a JavaScript function that
      can take up to three values: the request, the response, and a logger.  You can either mutate the
      response passed in (and return nothing), or return an altogether new response.</p>

    <p>More information: <a href='/docs/api/behaviors'>behaviors</a></p>
  </div>

  <div id='stubs-responses-proxy-description'>
    <p>The response is generated by proxying the request to a different server.  You can configure mountebank
    to return the saved response on subsequent requests based on certain conditions within the request.</p>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-proxy-to-description'>
    <p>Represents the destination to send the request.  For http/s, this should be a URL with the protocol and
    host but without a path (as shown to the left).  For tcp, this should be an object containing a
    <code>host</code> and <code>port</code>.</p>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-proxy-mode-description'>
    <p>Defines the replay behavior of the proxy.  Proxy responses work by creating new elements in the
      <code>stubs</code> array.  This field determines whether that newly created stub will be before or
      after the current stub in the array.  There are two options:</p>

    <ul>
      <li><code>proxyOnce</code> - always records the proxied call in the <code>stubs</code> array in
        front of itself, so the same call is never proxied twice.</li>
      <li><code>proxyAlways</code> - saves the proxied call <em>after</em> itself in the <code>stubs</code>
        array.  This allows you to capture different responses for the same call.
        You can later replay <code>proxyAlways</code> stubs by issuing a <code>GET</code>
        or <code>DELETE</code> to the imposter with the <code>removeProxies</code> and
        <code>replayable</code> query params, and re-<code>POST</code>ing the imposter.</li>
    </ul>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-proxy-key-description'>
    <p>In situations where the destination expects to use SSL mutual authentication, it will request a client
    certificate.  This field can contain the PEM-formatted client private key.</p>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-proxy-cert-description'>
    <p>In situations where the destination expects to use SSL mutual authentication, it will request a client
      certificate.  This field can contain the PEM-formatted client certificate.</p>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-proxy-predicateGenerators-description'>
    <p>An array of objects that defines how the predicates for new stubs are created.  Proxy responses work
      by creating new elements in the <code>stubs</code> array, either before the current stub (if
      <code>mode</code> is <code>proxyOnce</code>) or after the current stub (if <code>mode</code> is
      <code>proxyAlways</code>).  Each element in the <code>predicateGenerators</code> array
      will create a single element in the <code>predicates</code> array for newly created stub.</p>

    <p>Each generator should contain a <code>matches</code> field containing all the request elements you
    want to create predicates for.  The created predicates will be <code>deepEquals</code> predicates.</p>

    <p>More information: <a href='/docs/api/proxies'>proxies</a></p>
  </div>

  <div id='stubs-responses-inject-description'>
    <p>mountebank is scriptable, which allows you to use JavaScript to craft the response you want in situations
      where canned responses and proxy responses are not sufficient. Injection only works if <code>mb</code> is run with the
      <code>--allowInjection</code> flag.</p>

    <p>The injected function takes four parameters as shown on the left:</p>

    <ul>
      <li><code>request</code> - the protocol-specific request object</li>
      <li><code>state</code> - initially an empty object, the same instance will be passed into every response
      injection function within the same imposter.  You can use it to add any cross-response state you need to save.</li>
      <li><code>logger</code> - mountebank's logger, with standard <code>debug</code>, <code>info</code>,
      <code>warn</code>, and <code>error</code> functions</li>
      <li><code>callback</code> - For asynchronous use only, execute (with the response as a parameter) to return</li>
    </ul>

    <p>Injection can by synchronous or asnychronous.  Simply return a value representing the response for synchronous
    execution.  For asynchronous execution, pass the response object into the <code>callback</code> function.</p>

    <p>More information: <a href='/docs/api/injection'>injection</a></p>
  </div>

  <div id='stubs-predicates-description'>
    <p>In the absence of a predicate, a stub always matches, and there's never a reason to
      add more than one stub to an imposter.  Predicates allow imposters to have much richer
      behavior by defining whether or not a stub matches a request.  When multiple stubs are
      created on an imposter, the first stub that matches is selected.</p>

    <p>Each predicate object contains one or more of the request fields as keys.  Predicates
      are added to a stub in an array, and all predicates are AND'd together.  The following
      predicate operators are allowed:</p>

    <table>
      <tr>
        <th>Operator</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><code>equals</code></td>
        <td>The request field matches the predicate</td>
      </tr>
      <tr>
        <td><code>deepEquals</code></td>
        <td>Performs nested set equality on the request field, useful when
          the request field is an object (e.g. the <code>query</code> field in http)</td>
      </tr>
      <tr>
        <td><code>contains</code></td>
        <td>The request field contains the predicate</td>
      </tr>
      <tr>
        <td><code>startsWith</code></td>
        <td>The request field starts with the predicate</td>
      </tr>
      <tr>
        <td><code>endsWith</code></td>
        <td>The request field ends with the predicate</td>
      </tr>
      <tr>
        <td><code>matches</code></td>
        <td>The request field matches the JavaScript regular expression defined
          with the predicate.</td>
      </tr>
      <tr>
        <td><code>exists</code></td>
        <td>If <code>true</code>, the request field must exist.  If <code>false</code>,
          the request field must not exist.</td>
      </tr>
      <tr>
        <td><code>not</code></td>
        <td>Inverts a predicate</td>
      </tr>
      <tr>
        <td><code>or</code></td>
        <td>Logically or's two predicates together</td>
      </tr>
      <tr>
        <td><code>and</code></td>
        <td>Logically and's two predicates together</td>
      </tr>
      <tr>
        <td><code>inject</code></td>
        <td>Injects JavaScript to decide whether the request matches or not.
          See the <a href='/docs/api/injection'>injection</a> page for more details.</td>
      </tr>
    </table>

    <p>More information: <a href='/docs/api/predicates'>predicates</a></p>
  </div>

  <div id='stubs-predicates-equals-description'>
    <p>A type of predicate that requires the given request fields to equal the predicate value.
    By default, mountebank uses a case-insensitive equality.</p>

    <p>More information: <a href='/docs/api/predicates'>predicates</a></p>
  </div>

  <div id='stubs-predicates-equals-caseSensitive-description'>
    <p>If true, mountebank will require the request field to satisfy the predicate value in
    a case sensitive comparison.</p>

    <p>More information: <a href='/docs/api/predicates'>predicates</a></p>
  </div>

  <div id='stubs-predicates-equals-except-description'>
    <p>Defines a regular expression that is stripped out of the request field before matching.</p>

    <p>More information: <a href='/docs/api/predicates'>predicates</a></p>
  </div>

  <div id='stubs-predicates-equals-xpath-description'>
    <p>It is common to want to use predicates on XML response bodies, but annoying to treat the XML as
      simple text with many of the predicates.  mountebank uses the <code>xpath</code> predicate parameter
      to narrow the scope of the predicate value to a value matched by the the xpath selector.</p>

    <p>More information: <a href='/docs/api/xpath'>xpath</a></p>
  </div>

  <div id='stubs-predicates-inject-description'>
    <p>When none of the built-in predicates are sufficient, mountebank allows you to script the
    predicate.  Like all injection, this requires the <code>--allowInjection</code>
    <a href='/docs/commandLine'>command line parameter</a> to be set.  The injected function
    accepts the following parameters:</p>

    <ul>
      <li><code>request</code> - the full request object</li>
      <li><code>logger</code> - mountebank's logger, with standard <code>debug</code>, <code>info</code>,
        <code>warn</code>, and <code>error</code> functions</li>
    </ul>

    <p>Return <code>true</code> to pass the predicate.</p>

    <p>More information: <a href='/docs/api/injection'>injection</a></p>
  </div>

  <div id='stubs-matches-description' class='response'>
    <p>An array of all activity by this stub, useful in troubleshooting why a stub is or is not
    responding (generally for debugging your predicates).  Each object will contain the incoming
    <code>request></code>, the outgoing <code>response</code>, and a <code>timestamp</code>.</p>

    <p>The <code>matches</code> array only shows up in the response if the
    <a href='/docs/commandLine'><code>--mock command line parameter</code></a> is passed.</p>
  </div>

  <div id='endOfRequestResolver-description'>
    <p>The tricky bit about using the raw TCP protocol is knowing when a request ends.  Application
      protocols give some way of determining this, such as the <code>Content-Length</code> header in
      HTTP or by embedding the message length in binary protocols.  By default, mountebank assumes
      each packet represents a separate request, which typically limits the size of each request
      to somewhere between 1500 and 64k bytes (you'll get a larger payload using the loopback interface
      on localhost, but lower level protocols like Ethernet will force a smaller payload over the network).
      This strategy works for many scenarios as simple serialized requests tend to fall below this size,
      but breaks down with large requests.</p>

    <p>mountebank allows you the flexibility to determine when a request ends using the
      <code>endOfRequestResolver</code> at the imposter level.  The value is a JavaScript function
      that takes a parameter that represents all request data captured from all packets so far.  If the
      imposter is in <code>text</code> mode, the parameter will be a string; in binary it will be a
      <a href='http://nodejs.org/api/buffer.html'>node.js Buffer object</a>.
      mountebank's <code>logger</code> object is also passed as an optional second parameter to
      assist in troubleshooting.  Like all JavaScript injection, it requires the
      <a href='/docs/commandLine'>--allowInjection command line flag</a> to execute.</p>

    <p>More information: <a href='/docs/protocols/tcp'>tcp</a></p>
  </div>

  <div id='requests-description' class='response'>
    <p>mountebank will save off all requests to the imposter for mock verification.  By retrieving
    the imposter, your client code can determine if an expected service call was in fact made.</p>

    <p>Since saving requests represents a memory leak, the <code>requests</code> array will only
    be saved if the <a href='/docs/commandLine'>--mock command line flag</a> is set.</p>

    <p>More information: <a href='/docs/api/mocks'>mocks</a></p>
  </div>

  <div id='_links-description' class='response'>
    <p>Defines the hypermedia relationships for the imposter.</p>
  </div>
</div>

<script type='text/javascript'>
  function mbHighlight () {
    function descriptionFor (id) {
      return $('#' + id + '-description');
    }

    function movedRight (fromElement, x, y) {
      return x > fromElement.offset().left &&
             y > fromElement.offset().top &&
             y < fromElement.offset().top + fromElement.height();
    }

    function hoverOn () {
      $('#specification span').on('mouseenter', function () {
        $('#specification span').css('background-color', '');
        $('#specification-description div').hide();

        descriptionFor(this.id).css('top', $(this).offset().top - $('#port').offset().top);

        $(this).find('a').css('visibility', 'visible');
        $(this).css('background-color', 'gold');
        descriptionFor(this.id).show();
      });

      $('#specification span').on('mouseleave', function (event) {
        $(this).find('a').css('visibility', 'hidden');

        if (!movedRight($(event.fromElement), event.pageX, event.pageY)) {
          $(this).css('background-color', '');
          descriptionFor(this.id).hide();
        }
      });
    }

    function hoverOff () {
      $('#specification span').off('mouseenter');
      $('#specification span').off('mouseleave');
    }

    $('#specification a').click(function () {
      if (!this.pinned) {
        this.pinned = true;
        $(this).css('text-decoration', 'underline');
        hoverOff();
      }
      else {
        this.pinned = false;
        $(this).css('text-decoration', '');
        hoverOn();
      }
    });

    hoverOn();
  }

  $('#specification-description').height($('#specification').height());
  mbHighlight();
</script>

<% include ../../../_footer %>
