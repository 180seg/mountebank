#!/usr/bin/env node
'use strict';

var controlServer = require('../src/controlServer'),
    cli = require('../src/cli'),
    fs = require('fs'),
    exec = require('child_process').exec;

function usage () {
    console.log("Usage: mb <command> [--port <port>] [--pidfile <pidfile>]\n");
    console.log("where <command> is one of:");
    console.log("\tstart, stop, restart");
}

function error (message) {
    console.log(message + "\n");
    usage();
    process.exit(1);
}

var serverAt = function (options) {
    return {
        start: function () {
            var server = controlServer.create(options.port);

            fs.writeFileSync(options.pidfile, process.pid.toString());
            var shutdown = function shutdown () {
                fs.unlinkSync(options.pidfile);
                server.close();
                process.exit();
            };
            process.on('SIGINT', shutdown);
            process.on('SIGTERM', shutdown);
        },

        stop: function () {
            var kill = 'if [ -e PIDFILE ]; then\n' +
                       '    kill `cat PIDFILE`\n' +
                       'else\n' +
                       '    echo "No such pidfile: PIDFILE"\n' +
                       '    exit 1\n' +
                       'fi',
                command = kill.replace(/PIDFILE/g, options.pidfile);

            exec(command, function (error, stdout, stderr) {
                console.log(stdout);
                if (error) {
                    console.log(stderr);
                }
            });
        },

        restart: function () {
            this.stop();
            this.start();
        }
    };
};

try {
    var defaultOptions = { port: 3000, pidfile: 'mb.pid' },
        commandLine = cli.parse(process.argv.slice(2), defaultOptions),
        server = serverAt(commandLine.options);

    switch (commandLine.command) {
    case 'start':
        server.start();
        break;
    case 'stop':
        server.stop();
        break;
    case 'restart':
        server.restart();
        break;
    default:
        error("Invalid command '" + commandLine.command + "'.");
        break;
    }
}
catch (err) {
    error(err.message);
}
